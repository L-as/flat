{-# LANGUAGE NegativeLiterals#-}

{-# LANGUAGE NoMonomorphismRestriction, ExtendedDefaultRules#-}
module DocTest.Flat.Instances.Base where
import qualified DocTest
import Test.Tasty(TestTree,testGroup)
import Flat.Instances.Base
import Flat.Instances.Test
import Data.Fixed
import Data.Int
import Data.Complex(Complex(..))
import Numeric.Natural
import Data.Word
import Data.Ratio
import qualified Data.List.NonEmpty as B
test = tstBits

tests :: IO TestTree
tests = testGroup "Flat.Instances.Base" <$> sequence [  DocTest.test "src/Flat/Instances/Base.hs:38" ["(True,0,\"\")"] (DocTest.asPrint( test () )),  DocTest.test "src/Flat/Instances/Base.hs:51" ["(True,1,\"0\")"] (DocTest.asPrint( test False )),  DocTest.test "src/Flat/Instances/Base.hs:54" ["(True,1,\"1\")"] (DocTest.asPrint( test True )),  DocTest.test "src/Flat/Instances/Base.hs:69" ["(True,8,\"01100001\")"] (DocTest.asPrint( test 'a' )),  DocTest.test "src/Flat/Instances/Base.hs:74" ["(True,16,\"11001000 00000001\")"] (DocTest.asPrint( test 'È' )),  DocTest.test "src/Flat/Instances/Base.hs:77" ["(True,24,\"10001101 10011100 00000001\")"] (DocTest.asPrint( test '不' )),  DocTest.test "src/Flat/Instances/Base.hs:93" ["(True,1,\"0\")"] (DocTest.asPrint( test (Nothing::Maybe Bool) )),  DocTest.test "src/Flat/Instances/Base.hs:96" ["(True,2,\"10\")"] (DocTest.asPrint( test (Just False::Maybe Bool) )),  DocTest.test "src/Flat/Instances/Base.hs:102" ["(True,2,\"00\")"] (DocTest.asPrint( test (Left False::Either Bool ()) )),  DocTest.test "src/Flat/Instances/Base.hs:105" ["(True,1,\"1\")"] (DocTest.asPrint( test (Right ()::Either Bool ()) )),  DocTest.test "src/Flat/Instances/Base.hs:111" ["(True,16,\"11110110 00000001\")"] (DocTest.asPrint( test (MkFixed 123 :: Fixed E0) )),  DocTest.test "src/Flat/Instances/Base.hs:114" ["True"] (DocTest.asPrint( test (MkFixed 123 :: Fixed E0) == test (MkFixed 123 :: Fixed E2) )),  DocTest.test "src/Flat/Instances/Base.hs:127" ["(True,8,\"00000000\")"] (DocTest.asPrint( test (0::Word8) )),  DocTest.test "src/Flat/Instances/Base.hs:130" ["(True,8,\"11111111\")"] (DocTest.asPrint( test (255::Word8) )),  DocTest.test "src/Flat/Instances/Base.hs:174" ["(True,8,\"01111111\")"] (DocTest.asPrint( test (127::Word) )),  DocTest.test "src/Flat/Instances/Base.hs:179" ["(True,16,\"11111110 00000001\")"] (DocTest.asPrint( test (254::Word) )),  DocTest.test "src/Flat/Instances/Base.hs:184" ["(True,24,\"10000000 10000000 00000010\")"] (DocTest.asPrint( test (32768::Word32) )),  DocTest.test "src/Flat/Instances/Base.hs:189" ["True"] (DocTest.asPrint( all (test (3::Word) ==) [test (3::Word16),test (3::Word32),test (3::Word64)] )),  DocTest.test "src/Flat/Instances/Base.hs:202" ["(True,8,\"00000000\")"] (DocTest.asPrint( test (0::Natural) )),  DocTest.test "src/Flat/Instances/Base.hs:205" ["(True,144,\"10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 00000010\")"] (DocTest.asPrint( test (2^120::Natural) )),  DocTest.test "src/Flat/Instances/Base.hs:257" ["(True,8,\"00000000\")"] (DocTest.asPrint( test (0::Int) )),  DocTest.test "src/Flat/Instances/Base.hs:260" ["(True,8,\"00000001\")"] (DocTest.asPrint( test (-1::Int) )),  DocTest.test "src/Flat/Instances/Base.hs:263" ["(True,8,\"00000010\")"] (DocTest.asPrint( test (1::Int) )),  DocTest.test "src/Flat/Instances/Base.hs:266" ["(True,8,\"00000011\")"] (DocTest.asPrint( test (-2::Int) )),  DocTest.test "src/Flat/Instances/Base.hs:269" ["(True,8,\"00000100\")"] (DocTest.asPrint( test (2::Int) )),  DocTest.test "src/Flat/Instances/Base.hs:282" ["(True,8,\"00000000\")"] (DocTest.asPrint( test (0::Integer) )),  DocTest.test "src/Flat/Instances/Base.hs:285" ["(True,8,\"00000001\")"] (DocTest.asPrint( test (-1::Integer) )),  DocTest.test "src/Flat/Instances/Base.hs:288" ["(True,8,\"00000010\")"] (DocTest.asPrint( test (1::Integer) )),  DocTest.test "src/Flat/Instances/Base.hs:291" ["(True,8,\"00011111\")"] (DocTest.asPrint( test (-(2^4)::Integer) )),  DocTest.test "src/Flat/Instances/Base.hs:294" ["(True,8,\"00100000\")"] (DocTest.asPrint( test (2^4::Integer) )),  DocTest.test "src/Flat/Instances/Base.hs:297" ["(True,144,\"11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 00000011\")"] (DocTest.asPrint( test (-(2^120)::Integer) )),  DocTest.test "src/Flat/Instances/Base.hs:300" ["(True,144,\"10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 00000100\")"] (DocTest.asPrint( test (2^120::Integer) )),  DocTest.test "src/Flat/Instances/Base.hs:311" ["(True,8,\"00000000\")"] (DocTest.asPrint( test (0::Int8) )),  DocTest.test "src/Flat/Instances/Base.hs:314" ["(True,8,\"11111110\")"] (DocTest.asPrint( test (127::Int8) )),  DocTest.test "src/Flat/Instances/Base.hs:317" ["(True,8,\"11111111\")"] (DocTest.asPrint( test (-128::Int8) )),  DocTest.test "src/Flat/Instances/Base.hs:328" ["(True,8,\"00000000\")"] (DocTest.asPrint( test (0::Int16) )),  DocTest.test "src/Flat/Instances/Base.hs:331" ["(True,8,\"00000010\")"] (DocTest.asPrint( test (1::Int16) )),  DocTest.test "src/Flat/Instances/Base.hs:334" ["(True,8,\"00000001\")"] (DocTest.asPrint( test (-1::Int16) )),  DocTest.test "src/Flat/Instances/Base.hs:337" ["(True,24,\"11111111 11111111 00000011\")"] (DocTest.asPrint( test (minBound::Int16) )),  DocTest.test "src/Flat/Instances/Base.hs:342" ["(True,24,\"11111110 11111111 00000011\")"] (DocTest.asPrint( test (maxBound::Int16) )),  DocTest.test "src/Flat/Instances/Base.hs:355" ["(True,8,\"00000000\")"] (DocTest.asPrint( test (0::Int32) )),  DocTest.test "src/Flat/Instances/Base.hs:358" ["(True,40,\"11111111 11111111 11111111 11111111 00001111\")"] (DocTest.asPrint( test (minBound::Int32) )),  DocTest.test "src/Flat/Instances/Base.hs:361" ["(True,40,\"11111110 11111111 11111111 11111111 00001111\")"] (DocTest.asPrint( test (maxBound::Int32) )),  DocTest.test "src/Flat/Instances/Base.hs:372" ["(True,8,\"00000000\")"] (DocTest.asPrint( test (0::Int64) )),  DocTest.test "src/Flat/Instances/Base.hs:375" ["(True,80,\"11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 00000001\")"] (DocTest.asPrint( test (minBound::Int64) )),  DocTest.test "src/Flat/Instances/Base.hs:378" ["(True,80,\"11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 00000001\")"] (DocTest.asPrint( test (maxBound::Int64) )),  DocTest.test "src/Flat/Instances/Base.hs:398" ["(True,32,\"00000000 00000000 00000000 00000000\")"] (DocTest.asPrint( test (0::Float) )),  DocTest.test "src/Flat/Instances/Base.hs:401" ["(True,32,\"00000000 00000000 00000000 00000001\")"] (DocTest.asPrint( test (1.4012984643E-45::Float) )),  DocTest.test "src/Flat/Instances/Base.hs:404" ["(True,32,\"00000000 01111111 11111111 11111111\")"] (DocTest.asPrint( test (1.1754942107E-38::Float) )),  DocTest.test "src/Flat/Instances/Base.hs:431" ["(True,16,\"00000100 00000010\")"] (DocTest.asPrint( test (4 :+ 2 :: Complex Word8) )),  DocTest.test "src/Flat/Instances/Base.hs:439" ["(True,16,\"00000011 00000100\")"] (DocTest.asPrint( test (3%4::Ratio Word8) )),  DocTest.test "src/Flat/Instances/Base.hs:451" ["(True,1,\"0\")"] (DocTest.asPrint( test ([]::[Bool]) )),  DocTest.test "src/Flat/Instances/Base.hs:454" ["(True,5,\"10100\")"] (DocTest.asPrint( test [False,False] )),  DocTest.test "src/Flat/Instances/Base.hs:479" ["(True,1,\"0\")"] (DocTest.asPrint( test "" )),  DocTest.test "src/Flat/Instances/Base.hs:482" ["(True,28,\"10110000 11011000 01101100 0010\")"] (DocTest.asPrint( test "aaa" )),  DocTest.test "src/Flat/Instances/Base.hs:490" ["(True,2,\"10\")"] (DocTest.asPrint( test (B.fromList [True]) )),  DocTest.test "src/Flat/Instances/Base.hs:493" ["(True,4,\"0100\")"] (DocTest.asPrint( test (B.fromList [False,False]) )),  DocTest.test "src/Flat/Instances/Base.hs:502" ["(True,1,\"0\")"] (DocTest.asPrint( test (False,()) )),  DocTest.test "src/Flat/Instances/Base.hs:505" ["(True,0,\"\")"] (DocTest.asPrint( test ((),()) )),  DocTest.test "src/Flat/Instances/Base.hs:510" ["(True,7,\"0111011\")"] (DocTest.asPrint( test (False,True,True,True,False,True,True) ))]
